
[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "pyanagram_solver"
version = "0.1.0"
description = "Fast multiword anagram solver."
requires-python = ">=3.13"
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "maturin>=1.8.6",
] # Python dependencies if any

[tool.maturin]
features = ["pyo3/extension-module"] # If pyo3 features are conditional
# For a workspace structure, point to the Rust crate:
manifest-path = "../anagram_solver_core/Cargo.toml" 
# For a non-workspace (single crate for lib and bindings, as sketched):
# This assumes Cargo.toml in pyanagram_solver/ is for the bindings module.
# The current `lib.rs` is in `anagram_solver_core`. A common setup is:
# pyanagram_solver/
#  Cargo.toml (for the rust extension module)
#  src/lib.rs (the PyO3 bindings, which use anagram_solver_core as a dependency)
#  pyanagram_solver/ (python files)
#  ...
# For now, let's assume `anagram_solver_core` itself is built as the cdylib.
# So, `maturin build` would be run from `anagram_solver_core` or configured to point there.
# If anagram_solver_core/Cargo.toml has `crate-type = ["cdylib"]` and pyo3 dependency,
# then maturin can build it directly.
# The manifest-path in pyproject.toml would point to anagram_solver_core/Cargo.toml

module-name = "pyanagram_solver.core" # where the rust extension will be available
